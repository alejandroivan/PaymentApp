//
//  InstallmentsSelectionInteractor.swift
//  PaymentApp
//
//  Created by Alejandro Melo Domínguez on 08-01-19.
//  Copyright (c) 2019 Alejandro Melo Domínguez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol InstallmentsSelectionBusinessLogic {
    func loadInstallments(request: InstallmentsSelection.LoadInstallments.Request)
    func didConfirmPayerCost(at index: Int, completion: (() -> Void)?)
}

protocol InstallmentsSelectionDataStore {
    var amount: Int? { get set }
    var paymentMethod: PaymentMethod? { get set }
    var cardIssuer: Bank? { get set }
    var selectedPayerCost: PayerCost? { get set }
}

class InstallmentsSelectionInteractor: InstallmentsSelectionBusinessLogic, InstallmentsSelectionDataStore {
    var presenter: InstallmentsSelectionPresentationLogic?
    var worker: InstallmentsSelectionWorker? = InstallmentsSelectionWorker()

    var amount: Int?

    var paymentMethod: PaymentMethod?
    var paymentMethodId: String? { return paymentMethod?.id }

    var cardIssuer: Bank?
    var cardIssuerId: String? { return cardIssuer?.id }

    var payerCosts: PayerCosts = []
    var selectedPayerCost: PayerCost?

    // MARK: Do something
    func loadInstallments(request: InstallmentsSelection.LoadInstallments.Request) {
        typealias ResponseType = InstallmentsSelection.LoadInstallments.Response
        typealias ErrorType = InstallmentsSelection.LoadInstallments.ErrorResponse

        let response = ResponseType(isLoading: true, payerCosts: [])
        presenter?.presentLoadingIndicator(response: response)

        worker?.getInstallments(amount: amount!,
                                paymentMethodId: paymentMethodId!,
                                issuerId: cardIssuerId!,
                                completion: { [weak self] (installments, success, error) in
                                    guard success, let installments = installments else {
                                        let nsError = error! as NSError
                                        let message: String

                                        if nsError.code == NSURLErrorNotConnectedToInternet {
                                            message = "No hay conexión a Internet. Inténtalo nuevamente."
                                        } else {
                                            message = "No se pudo cargar las opciones de pago en cuotas. Inténtalo nuevamente más adelante."
                                        }

                                        let errorResponse = ErrorType(title: "Error al cargar",
                                                                      message: message)

                                        self?.presenter?.presentErrorMessage(response: errorResponse)
                                        return
                                    }

                                    // If didn't get any installments, it's probably because the amount is too big
                                    // Just say that there are no installments plan for the input data
                                    guard let pcs = installments.first?.payerCosts else {
                                        let errorResponse = ErrorType(title: "Error al cargar",
                                                                      message: "No se ha podido obtener opciones de pago con los datos seleccionados. Inténtalo nuevamente.")

                                        self?.presenter?.presentErrorMessage(response: errorResponse)
                                        return
                                    }

                                    self?.payerCosts = pcs
                                    let installmentsResponse = ResponseType(isLoading: false, payerCosts: pcs)

                                    self?.presenter?.presentInstallments(response: installmentsResponse)
        })
    }

    func didConfirmPayerCost(at index: Int, completion: (() -> Void)? = nil) {
        selectedPayerCost = payerCosts[index]
        completion?()
    }
}
