//
//  PaymentMethodCCViewController.swift
//  PaymentApp
//
//  Created by Alejandro Melo Domínguez on 08-01-19.
//  Copyright (c) 2019 Alejandro Melo Domínguez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PaymentMethodCCDisplayLogic: class {
    func showLoadingIndicator()
    func hideLoadingIndicator()

    func displayPaymentMethods(viewModel: PaymentMethodCC.LoadPaymentMethods.ViewModel)
    func displayErrorMessage(viewModel: PaymentMethodCC.LoadPaymentMethods.ErrorViewModel)
}

class PaymentMethodCCViewController: UIViewController, PaymentMethodCCDisplayLogic {
    var interactor: PaymentMethodCCBusinessLogic?
    var router: (NSObjectProtocol & PaymentMethodCCRoutingLogic & PaymentMethodCCDataPassing)?

    private var paymentMethods: [PaymentMethodViewModel] = []

    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!

    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = PaymentMethodCCInteractor()
        let presenter = PaymentMethodCCPresenter()
        let router = PaymentMethodCCRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        loadPaymentMethods()
    }

    // MARK: Use cases
    func showLoadingIndicator() {
        view.isUserInteractionEnabled = false
        activityIndicator.startAnimating()
    }

    func hideLoadingIndicator() {
        view.isUserInteractionEnabled = true
        activityIndicator.stopAnimating()
    }

    func displayPaymentMethods(viewModel: PaymentMethodCC.LoadPaymentMethods.ViewModel) {
        paymentMethods = viewModel.paymentMethods
        tableView.reloadData()

        if viewModel.isLoading {
            showLoadingIndicator()
        } else {
            hideLoadingIndicator()
        }
    }

    func displayErrorMessage(viewModel: PaymentMethodCC.LoadPaymentMethods.ErrorViewModel) {
        paymentMethods = []
        tableView.reloadData()

        let alertController = UIAlertController(title: viewModel.title,
                                                message: viewModel.message,
                                                preferredStyle: .alert)
        
        alertController.addAction(UIAlertAction(title: viewModel.cancelButtonTitle,
                                                style: .cancel,
                                                handler: { _ in
                                                    self.navigationController?.popViewController(animated: true)
        }))

        hideLoadingIndicator()
        present(alertController, animated: true, completion: nil)
    }

    // MARK: Methods
    func loadPaymentMethods() {
        let request = PaymentMethodCC.LoadPaymentMethods.Request()
        interactor?.loadPaymentMethods(request: request)
    }
}

// MARK: - UITableView DataSource & Delegate
extension PaymentMethodCCViewController: UITableViewDataSource, UITableViewDelegate {
    private static let cellIdentifier = "PaymentMethodCCTableViewCell"

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return paymentMethods.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let identifier = type(of: self).cellIdentifier
        let paymentMethod = paymentMethods[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: identifier, for: indexPath) as! PaymentMethodCCTableViewCell

        cell.cellImageUrl = paymentMethod.imageUrl
        cell.cellTitle = paymentMethod.name
        cell.cellSubtitle = paymentMethod.type

        return cell
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        interactor?.didSelectPaymentMethod(at: indexPath.row)

        tableView.deselectRow(at: indexPath, animated: true)
//        performSegue(withIdentifier: "BankSelection", sender: nil) // TODO: Uncomment when implemented
    }
}
