//
//  PaymentMethodCCInteractor.swift
//  PaymentApp
//
//  Created by Alejandro Melo Domínguez on 08-01-19.
//  Copyright (c) 2019 Alejandro Melo Domínguez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PaymentMethodCCBusinessLogic {
    func loadPaymentMethods(request: PaymentMethodCC.LoadPaymentMethods.Request)
    func didSelectPaymentMethod(at index: Int)
}

protocol PaymentMethodCCDataStore {
    var amount: Int? { get set }
    var selectedPaymentMethod: PaymentMethod? { get set }
}

class PaymentMethodCCInteractor: PaymentMethodCCBusinessLogic, PaymentMethodCCDataStore {
    var presenter: PaymentMethodCCPresentationLogic?
    var worker: PaymentMethodCCWorker? = PaymentMethodCCWorker()

    var amount: Int?
    var selectedPaymentMethod: PaymentMethod?
    var paymentMethods: PaymentMethods  = []

    // MARK: Use cases
    func loadPaymentMethods(request: PaymentMethodCC.LoadPaymentMethods.Request) {
        typealias ResponseType = PaymentMethodCC.LoadPaymentMethods.Response
        typealias ErrorType = PaymentMethodCC.LoadPaymentMethods.ErrorResponse

        let response = ResponseType(isLoading: true, paymentMethods: [])
        presenter?.presentLoadingIndicator(response: response)

        worker?.getPaymentMethods(completion: { [weak self] (methods, success, error) in
            guard success, let methods = methods?.creditCards else { // Requirement: Only credit cards!
                let nsError = error! as NSError
                let message: String

                if nsError.code == NSURLErrorNotConnectedToInternet {
                    message = "No hay conexión a Internet. Inténtalo nuevamente."
                } else {
                    message = "No se pudo cargar los métodos de pago. Inténtalo nuevamente más adelante."
                }

                let errorResponse = ErrorType(title: "Error al cargar",
                                              message: message)

                self?.presenter?.presentErrorMessage(response: errorResponse)
                return
            }

            self?.paymentMethods = methods

            let methodsResponse = ResponseType(isLoading: false, paymentMethods: methods)
            self?.presenter?.presentPaymentMethods(response: methodsResponse)
        })
    }

    func didSelectPaymentMethod(at index: Int) {
        selectedPaymentMethod = paymentMethods[index]
    }
}
