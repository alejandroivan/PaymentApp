//
//  BankSelectionPresenter.swift
//  PaymentApp
//
//  Created by Alejandro Melo Domínguez on 08-01-19.
//  Copyright (c) 2019 Alejandro Melo Domínguez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BankSelectionPresentationLogic {
    func presentLoadingIndicator(response: BankSelection.LoadBanks.Response)
    func presentBanks(response: BankSelection.LoadBanks.Response)
    func presentErrorMessage(response: BankSelection.LoadBanks.ErrorResponse)
}

class BankSelectionPresenter: BankSelectionPresentationLogic {
    weak var viewController: BankSelectionDisplayLogic?

    // MARK: Do something
    func presentLoadingIndicator(response: BankSelection.LoadBanks.Response) {
        if response.isLoading {
            viewController?.showLoadingIndicator()
        } else {
            viewController?.hideLoadingIndicator()
        }
    }

    func presentBanks(response: BankSelection.LoadBanks.Response) {
        let banks = response.banks
        var bankViewModels: [BankViewModel] = []

        banks.forEach {
            let bankViewModel = BankViewModel(imageUrl: $0.thumbnail,
                                              name: $0.name)
            bankViewModels.append(bankViewModel)
        }

        let viewModel = BankSelection.LoadBanks.ViewModel(isLoading: response.isLoading,
                                                          banks: bankViewModels)
        viewController?.displayBanks(viewModel: viewModel)
    }

    func presentErrorMessage(response: BankSelection.LoadBanks.ErrorResponse) {
        // Here we should do stuff like localize strings and format
        let viewModel = BankSelection.LoadBanks.ErrorViewModel(title: response.title,
                                                               message: response.message,
                                                               cancelButtonTitle: "Volver")
        viewController?.displayErrorMessage(viewModel: viewModel)
    }
}
