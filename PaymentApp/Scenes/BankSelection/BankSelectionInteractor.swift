//
//  BankSelectionInteractor.swift
//  PaymentApp
//
//  Created by Alejandro Melo Domínguez on 08-01-19.
//  Copyright (c) 2019 Alejandro Melo Domínguez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BankSelectionBusinessLogic {
    func loadBanks(request: BankSelection.LoadBanks.Request)
    func didSelectBank(at index: Int)
}

protocol BankSelectionDataStore {
    var amount: Int? { get set }
    var paymentMethod: PaymentMethod? { get set }
    var paymentMethodId: String? { get }
    var selectedBank: Bank? { get set }
}

class BankSelectionInteractor: BankSelectionBusinessLogic, BankSelectionDataStore {
    var presenter: BankSelectionPresentationLogic?
    var worker: BankSelectionWorker? = BankSelectionWorker()

    var amount: Int?

    var paymentMethod: PaymentMethod?
    var paymentMethodId: String? { return paymentMethod?.id }

    var selectedBank: Bank?
    var banks: Banks = []

    // MARK: Do something
    func loadBanks(request: BankSelection.LoadBanks.Request) {
        typealias ResponseType = BankSelection.LoadBanks.Response
        typealias ErrorType = BankSelection.LoadBanks.ErrorResponse

        let response = ResponseType(isLoading: true, banks: [])
        presenter?.presentLoadingIndicator(response: response)

        guard let paymentMethodId = paymentMethodId else {
            let errorResponse = ErrorType(title: "Error al cargar",
                                          message: "Ha ocurrido un error al procesar la información de tu método de pago.")
            presenter?.presentErrorMessage(response: errorResponse)
            return
        }

        worker?.getBanks(paymentMethodId: paymentMethodId,
                         completion: { [weak self] (banks, success, error) in
                            guard success, let banks = banks, !banks.isEmpty else {
                                let message: String

                                if let nsError = error as NSError? {
                                    if nsError.code == NSURLErrorNotConnectedToInternet {
                                        message = "No hay conexión a Internet. Inténtalo nuevamente."
                                    } else {
                                        message = "Ha ocurrido un error al cargar la información de bancos. Inténtalo nuevamente más adelante."
                                    }
                                } else {
                                    message = "No se ha encontrado bancos compatibles con tu selección. Por favor, elige otro medio de pago."
                                }

                                let errorResponse = ErrorType(title: "Error al cargar",
                                                              message: message)

                                self?.presenter?.presentErrorMessage(response: errorResponse)
                                return
                            }

                            self?.banks = banks

                            let banksResponse = ResponseType(isLoading: false, banks: banks)
                            self?.presenter?.presentBanks(response: banksResponse)
        })
    }
    
    func didSelectBank(at index: Int) {
        selectedBank = banks[index]
    }
}
